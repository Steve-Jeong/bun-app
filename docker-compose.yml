version: '3'
services:
  nginx:
    image: nginx:1.25.4-alpine3.18
    ports:
      - 3000:80   # Host의 3000번을 nginx container의 80으로 연결한다.
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - node-app

  node-app:
    deploy:
      replicas: 8
      restart_policy:
        condition: any
      update_config:
        parallelism: 2
        delay: 10s
    build: 
      context: .
      args: 
        NODE_ENV: $NODE_ENV
    image: jst0930/bun-devops
    tty: true
    depends_on:
      - mongo
      - redis
    # ports:
    #   - $HOST_PORT:$PORT
    environment:
      - HOST_PORT=$HOST_PORT
      - PORT=$PORT
      - NODE_ENV=$NODE_ENV
      # - MY_ENV=some_env_variable
    volumes:
      - ./:/app # named volume인지 서브디렉토리인지 확실한 구분을 위해 서브디렉토리에는 /를 붙인다.
      - /app/node_modules
    stop_grace_period: 0s
    command: bun run dev

  mongo:
    image: mongo:6   #mongo database
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_USER
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
    volumes:
      - mongo-db:/data/db    # named volume이름은 volume section에 그 이름이 등록돼 있어야 한다.

  redis:
    image: redis:7.2-alpine
    command: sh -c "redis-server --appendonly yes --requirepass $REDIS_PASSWORD"
    # ports:   # productio에서는 포트를 expose하지 않는다.
    #   - 6379:6379

volumes:
  mongo-db:    #  :으로 끝난다.
